<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Multilayer React Application</title>
      <link href="/2021/07/01/Multilayer-React-Application/"/>
      <url>/2021/07/01/Multilayer-React-Application/</url>
      
        <content type="html"><![CDATA[<p>Every successful project needs a clear architecture, which is understood by all team members.</p><p><img src="/images/multilayer-react/overview.png" alt="Architecture overview"></p><p><em>We are considering adding Domain layer here. btw, with our current materials, this is already a good improvement, we can improve it later</em></p><h2 id="Why-do-we-need-a-multilayer-structure-in-React"><a href="#Why-do-we-need-a-multilayer-structure-in-React" class="headerlink" title="Why do we need a multilayer structure in React?"></a>Why do we need a multilayer structure in React?</h2><ul><li><p>It helps us to define a clear architecture of an application.</p></li><li><p>With this, our source code is easy to understand. Newcomer will be happy with this.</p></li><li><p>Reduce dependency on tools&#x2F;technology. That means, we can choose whatever tool we want to use, update or replace it easily.</p></li><li><p>API can implement by any XHR-supported library like Axios, Node-fetch, Ajax, Request, GraphQl,…</p><ul><li>View can be implemented by React, Vue, Angular, … never mind, we just focus on React, right?</li><li>Business layer, it’s just javascript, so you can reuse it in any javascript framework you want.</li></ul></li><li><p>Easier to write test for each layer.</p></li><li><p>We can write unit test for every very small scope, so it takes a very small effort.</p><ul><li>If we need to do integration test? just do it with the business layer.</li><li>If we need E2E test? just do it with the view layer.</li></ul></li><li><p>Good file, folder structure to write and store code.</p></li><li><p>And many other benefits:</p></li><li><p>Optimize code reusing.</p><ul><li>Avoid code duplication.</li><li>Harnessing team synergy.</li></ul></li></ul><p>Sound good enough? Let go to the definition.</p><h2 id="Layer-Definition"><a href="#Layer-Definition" class="headerlink" title="Layer Definition"></a>Layer Definition</h2><h3 id="Unit-code-layer"><a href="#Unit-code-layer" class="headerlink" title="Unit code layer"></a>Unit code layer</h3><p><img src="/images/multilayer-react/unit-code.png" alt="unit-code"></p><p>This layer includes a very small basic simple piece of code like API call, local configuration, constants, mapping function ,…<br>Do you need to do math? yep, you should do in this layer.</p><p><img src="/images/multilayer-react/api-example-1624568393346.png" alt="api-example"></p><h3 id="Business-layer"><a href="#Business-layer" class="headerlink" title="Business layer"></a>Business layer</h3><p><img src="/images/multilayer-react/business-layer-1624568932555.png" alt="business-layer"></p><p>Yay, our main character here.<br>This layer will carry all the most complex things in our application, business logic. Every single piece of data of application should go through here.</p><p>This layer should be designed to work standalone. Or we can say, our application are working from here.</p><p><code>Business services</code> cover our data domain changes. like get user profile, update user profile.</p><p><code>Application Services</code> cover application data changes. Navigate to other routes, toggle something in header, call a modal show up,..etc. UI layer may hooks to data in this layer to do updating.</p><p>Each service should be constructed as a singleton instance. Each method of service should be designed to cover single or composite changes to data or application.</p><p><img src="/images/multilayer-react/business-layer-example.png" alt="business layer"></p><h3 id="View-amp-Hooks-layer"><a href="#View-amp-Hooks-layer" class="headerlink" title="View &amp; Hooks layer"></a>View &amp; Hooks layer</h3><p><img src="/images/multilayer-react/Views.png" alt="Views"></p><p>Right now, we have a fully working application, agnostic of any framework, ready to be put to life by React.</p><p>The view layer is composed of <code>UI Components</code> and <code>Hooks</code>.</p><p><code>UI Components</code> are concerned with how thing look while <code>Hooks</code> take care of data to be rendered, from now we will call this data is <code>state</code>. Yes, that is UI-Hook relationship, they love each other and share private things together. <code>Hook&#39;s state</code> should use by only and only by <code>UI components</code> and <code>UI components</code> should call only and only action provided by <code>Hooks</code>. &lt;3</p><p><code>UI Components</code> are designed to present things to users. Take state from <code>Hooks</code> to render, and call the action.</p><p><code>Usecase hooks</code> take care of everything a view needs to render, provide action to call, make separated Business services working together. Usually it will stick with a specific view.</p><p><code>Functional hooks</code> actually, we don’t need this type of hooks in this architecture, but to reuse all our designed hooks and keep familiar to our developer experience, this type of hook includes all hook thing doesn’t stick to specify business logic.</p><p><code>UI/State hooks</code> some unit components need private state to handle their behaviors. like Tab container needs to know what Tab is active to highlight it over other tabs.</p><p><img src="/images/multilayer-react/update-user.png" alt="update-user"></p><hr><h2 id="There-is-no-best-solution-only-trade-off-thing-exists"><a href="#There-is-no-best-solution-only-trade-off-thing-exists" class="headerlink" title="There is no best solution, only trade-off thing exists"></a>There is no best solution, only trade-off thing exists</h2><h3 id="Pros"><a href="#Pros" class="headerlink" title="Pros"></a>Pros</h3><ul><li>Clean, clear architecture.</li><li>Robust, reliable framework for long-term development.</li><li>Easy to maintain, update dependencies.</li><li>Consistent convention, coding style.</li><li>Consistent concepts go through all projects. We can gather all projects in one place with one architect with one configuration. Learn one code everywhere.</li><li>Easy to reuse code in truly way.</li><li>Every business logic collected to a single place. It’s easy to learn, so you can avoid write duplication code.</li><li>Test, test, test, everything is easy to test.</li><li>Everything grows up professionally. (or I call it Enterprise class)</li></ul><h3 id="Cons"><a href="#Cons" class="headerlink" title="Cons"></a>Cons</h3><ul><li><p>Feel everything is lengthy if you are not familiar with this style of coding. Take time to get familiar, I don’t see people talking too much about architecture in React world. this may be something new to you.</p></li><li><p>Hard to avoid boilerplate.</p><ul><li>Try…catch everywhere</li><li>There is no soft way to handle small logic.<ul><li>Eg: A simple view, need to call a simple api, not need to handle anything. you must still write View, Hook -&gt; Service -&gt; API</li></ul></li></ul></li><li><p>Our code base is not lightweight anymore. <em>But do you need a lightweight thing when it take many effort to maintain?</em></p></li><li><p>Rare but do exist, business layer can grow too big make initial bundle become big too.</p></li></ul><h2 id="Conclusions"><a href="#Conclusions" class="headerlink" title="Conclusions"></a>Conclusions</h2><p>In this article, we looked at how to organize a React project to make it more efficient. By separating the responsibilities for each layer in multilayer concept, we can turn our project into a much more organized structure, easy to understand and represent to a good file structure.</p><p>With such an approach, each layer (and it representing files structure) will have its own place and responsibilities. This will enable me and my team to set architecture standards, make the entire codebase more robust and maintainable, and streamline our development process. Newcomers join our team can read this article and feel comfortable to continue our work.</p><p>If you liked this guide, please help me to share it. If you want to help me to improve it, i am interested in your comment in <a href="https://github.com/mnhlt/mnhlt.github.io/issues">here</a>.</p>]]></content>
      
      
      <categories>
          
          <category> coding </category>
          
          <category> reactjs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reactjs </tag>
            
            <tag> architecture </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
